FORMAT: 1A
HOST: https://pod-rest.ocp.dv.paysafecard.com/v1

# Distributor REST API
This document should give business partners a clear understanding of the technical integration work that needs to be carried to successfully implement the Distributor API.

The Distributor REST API allows full control of the sales process in real-time for both parties and therefore means some integration work and thorough testing of the real-time interface.

# Integration Process Overview
The following steps need to be completed in order to integrate the API.

+ **Test Data**: paysafecard provides the test data package. This contains an API key (for authentication), account details, an integration checklist and a link to the downloads page.
+ **IP whitelisting**: The business partner provides the IP(s) used to connect to the paysafecard system, to be whitelisted.
+ **Integration in the Test Environment**: The business partner integrates the API into their test environment. Detailed information about the flows and API requests are contained below in this documentation.
+ **Integration Test**: As soon as the integration is finished in the test environment and the integration checklist fulfilled, the business partner must contact the paysafecard integration team who will test the API implementation as well as verify the voucher samples.
+ **Reconciliation Test:** paysafecard provides an example of a reconciliation file from the test system that must be processed by the business partner.
+ **Productive Data**: Once the integration test is successful, paysafecard provides the productive data (API key).
+ **Switch to Production**: The business partner switches the integration to the production environment (change API endpoints and API key).
+ **Productive Check**: An end to end test must be carried out to ensure a successful connection to the productive environment. A new voucher sample must be provided as proof of a successful integration in the productive environment. .
+ **Go-live**: As soon as the productive check is successful, the technical integration is finished and a date can be set for the go-live.

# Technical Integration
This section provides a technical introduction to the Distributor REST API.

## About the API
The Distributor REST API follows <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">*RESTful*</a> design principles making it easy to understand and integrate the API.
Representational State Transfer (REST) is a software architecture style, consisting of guidelines for creating scalable web services.

RESTful systems typically communicate over the Hypertext Transfer Protocol with the same HTTP verbs (GET, POST, PUT, DELETE, etc.) used by web browsers to retrieve web pages and send data to remote servers.

It also facilitates solid and universally accepted foundations like [*http basic authentication*](http://en.wikipedia.org/wiki/Basic_access_authentication), [*http verbs*](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), [*JSON*](http://en.wikipedia.org/wiki/JSON) and [*CORS*](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing).

## Versioning
Every time there is backwards-incompatible change to the API, a new major version will be released. This major version is part of the URL path.
The current major version is *v1*. Unless informed by our technical support department that we are dropping support for a particular API version, you do not need to switch API versions.

## Establishing a connection
A connection to the paysafecard system is successful if the following prerequisites are fulfilled:
- API key for request authentication provided by paysafecard.
- Authorization of the business partner server IP address (if a 403 error is received when trying to access the service, it is likely that the IP address is not yet allowed to access).
- Content-type: Please make sure that the content type in the HTTP header, when submitting requests, is set to **Content-Type: application/json**
- Character encoding needs to be in UTF-8

## API key authentication
Every request must be authenticated using an API key.
- The value of the **API key needs to be base64 encoded** when transmitted in the HTTP header!
- Set the key as the username. [*HTTP basic authentication*](http://en.wikipedia.org/wiki/Basic_access_authentication)
- Your API key may only be used from your backend systems.
- **Please note:** Your API key must be kept secured - never expose the API key to anybody!

Below is an example of how the API key is supposed to be set.

```
Authorization: Basic cHNjX0R4dThqSnI1LVdPYXhLWnpjOXdyMUtNLXd1Y3dZMXg=
```

## Test Environment and Endpoints
Every new business partner needs to first integrate the Paysafecash API on the test environment.
Once the integration is finished, a UAT(User Acceptance Test) needs to be done in order to ensure a seemless integration flow.

- The endpoint for the *test environment* is: https://distributor.test.paysafecard.com/v1/
- The endpoint for the *production environment* is: https://distributor.paysafecard.com/v1/

# Pin-on-Demand and Extensions
This section provides a comprehensive overview of the paysafecard Pin-on-Demand product and its extensions.

## paysafecard Pin-on-Demand
Pin-on-Demand is the core integration and allows for full control of the sales process in real-time for both parties.

Here the customer receives a PIN code that can be then be used at a webshop or to load a [*my paysafecard*](https://www.paysafecard.com/en/business/support/faq/details/my-paysafecard/) account, for the exact same amount paid at the payment point.

The big advantages are, that there is no manual order process, no need to maintain a PIN stock at business partner side and no need to send any reports â€“ the business partner will automatically receive reconciliation reports from paysafecard. 

### Pin-on-Demand transaction flow
![transaction_flow_pod](http://www.paysafecash.com/fileadmin/5_API/transaction_flow_pod.PNG "Pin-on-Demand")

## paysafecard direct
paysafecard direct is the brand name for topping up a *my paysafecard* account at the POS with fixed amounts. 

Here the customer generates a barcode directly using the *my paysafecard* app and the money is loaded into that same account after successful order execution at the POS.

The big advantage is that there is no exposure of the 16-digit paysafecard PIN to either the customer or the POS employee, thus being more secure and so higher face values are possible compared to Pin-on-Demand.

## Paysafecash
[Paysafecash](https://www.paysafecash.com/en-gb/) is the brand name for paying orders from e-commerce web shops at the POS with variable amounts.

Here the customer initates an order at a webshop, logins with its Paysafecash account data and a barcode is generated for the order amount.
Upon successful order execution at the POS, the payment is automatically completed at the web shop.

### paysafecard direct and Paysafecash transaction flow
![transaction_flow_direct_paysafecash](http://www.paysafecash.com/fileadmin/5_API/transaction_flow_pod.PNG "direct and_Paysafecash")

# Group Pin-on-Demand Process

# Group Pin-on-Demand Information

## Voucher print-out

# Group Pin-on-Demand API Requests

# Executing an order [/orders/]

## execute order [POST]

```
POST /orders/
```

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjXzdoT2lCTFc4bURSNFl3TWdDV3RPZHU4SWZXNjdBanU=

    + Attributes (execute order)
    

+ Response 201 (application/json)
            
        {
        "amount": 10,
        "currency": "EUR",
        "card": {
            "amount": 10,
            "currency": "EUR",
            "serial": 1850404211,
            "pin": "0730857406969111"
        },
        "distributor_id": "0009402006",
        "order_id": "order_0009402006_fXVbZFr01mN9Hb3fUHxq01zMnLVNXGsp"
        }
        

# Group How to handle a lost response

# Group Reconciliation / Sales Reporting 
By default on a daily basis the, the business partner will receive a detailed sales report (in csv), containing all orders of last day. Orders with a successfully executed as well as cancelled orders will be included in the reconciliation file.

The reconciliation files will be available on a SFTP at 3:00 for the previous day and should be picked up by the business partner. The SFTP will be a paysafecard SFTP and the distributor will have to pick up the files from the paysafecard SFTP. 

The distributor should process these reports on a daily basis in order to prevent any inconsistencies between both systems. 
Should there be orders delivered to the distributor but not sold, the distributor should make a `cancel order` request, otherwise they will be invoiced based on the reconciliation file.

paysafecard will invoice all orders that have been successfully delivered.  

Filename: ``YYYY-MM-DD_DID.CSV``

Example: 2014-05-05_0009300000.CSV

## Reconciliation Flow

## Reconciliation File records
H1 record - Identifies the header 1 record
```
|  distributor_id    
|  |
H1;93827495
```

H2 record - Identifies the header 2 record 
```
|  reporting period (start) 
|  |  
|  |          reporting period (end) 
|  |          |
H2;2011-11-01;2011-11-03 
```

H3 record - Identifies the header 3 record 
```
|  invoice id (if recon is sent with invoice) 
|  |                   invoice currency 
|  |                   |   total invoice amount 
|  |                   |   |    
H3;90045466/06.11.2011;EUR;500.00
```

D record - Indicates the detail record 
```
| Distributor order id 
| |     Utc offset 
| |     |   Order date and time 
| |     |   |                   Distributor id 
| |     |   |                   |          Retailer id 
| |     |   |                   |          |   Shop id
| |     |   |                   |          |   |   Terminal id 
| |     |   |                   |          |   |   |   Customer identification type 
| |     |   |                   |          |   |   |   |    Delivery type 
| |     |   |                   |          |   |   |   |    |      Country code
| |     |   |                   |          |   |   |   |    |      |  Face value  
| |     |   |                   |          |   |   |   |    |      |  |     Product id 
| |     |   |                   |          |   |   |   |    |      |  |     |   Serial 
| |     |   |                   |          |   |   |   |    |      |  |     |   |                Order status 
| |     |   |                   |          |   |   |   |    |      |  |     |   |                |         Error code 
| |     |   |                   |          |   |   |   |    |      |  |     |   |                |         |          
D;93837;-60;2011-10-12 22:25:23;0000006938;304;506;309;NONE;RETURN;DE;10.00;304;6954286854268596;DELIVERED;0
```

F record - Identifies the footer record (End of File)
```
|   number of lines (including this record) 
|   |
EOF;56 
```

Full example
```
H1;93827495 
H2;2011-11-01;2011-11-3 
H3;90045466/06.11.2011;EUR;500.00 
D;93837;-60;2011-10-12 22:25:23;0000006938;304;506;309;NONE;RETURN;DE;10.00;304;6954286854268596;DELIVERED;0 
EOF;56 
```



# Data Structures

## TypedObject (object)

## execute order (TypedObject)
+ country: AT (required) - The target country ISO code provided with the data package. (ISO 3166-1)
+ amount: 10.00 (number, required) - Order amount, precision must be 2 digits after the colon.
+ utc_offset: +00:00 (string, required) - The difference between the distributor time zone and UTC in minutes.
+ product_id: 00028 (number, required) - The id of the product that is requested. Available product idâ€™s can be found in the distribution contract with paysafecard. The product id stays the same for different face values.
+ delivery_type: RETURN (string, required) - To what channel should the card be delivered. RETURN returns the 16-digit pin to the end-customer. ACCOUNT loads the the customer account. 
+ capture: true (boolean, required) - 
+ currency: EUR (required) - ISO 4217 (3 letter ISO currency code).
+ shop_id: danadetest (string, required ) - Identifies the shop where the order is made. 
+ terminal_id: danadeterm1 (string, required) - Identifies the terminal where the actual order is made. One shop can have multiple terminals. It is required that each terminal has a unique id.
+ retailer_id: danade (string, required) - Can be used to distinguish retail channels. One distributor can have multiple retailers. Can also be used to identify sub-distributors. 
+ customer (object) 
    + `id_type`: NONE (required) - The customer identification type. ACCOUNT or NONE.