FORMAT: 1A
HOST: https://distributor.test.paysafecard.com/v1

# paysafecard direct and Paysafecash REST API
![direct_paysafecash_mobile](https://www.paysafecash.com/fileadmin/5_API/direct_paysafecash_mobile.png "paysafecard direct Voucher")

This document should give business partners a clear understanding of the technical integration work that needs to be carried
out to successfully implement the paysafecard direct and Paysafecash REST API.

paysafecard direct and Paysafecash are extensions of the paysafecard Pin-On-Demand (PoD) API.

In the background a regular paysafecard PIN is created, the main difference with existing PoD sales is
that there is no exposure of the 16-digit paysafecard PIN to either the customer or the POS employee.

If any questions arise, please feel free to contact us at [*integration@paysafecard.com*]().

# Products Overview
This section provides a brief description of all products supported by this API.

## paysafecard direct
paysafecard direct is the brand name for topping up a [*my paysafecard*](https://my.paysafecard.com/mypins-psc/) account at the POS with fixed amounts. 

Here the customer generates a barcode directly using the *my paysafecard* app and the money is loaded into that same account after successful order confirmation at the POS.

The big advantage is that there is no exposure of the 16-digit paysafecard PIN to either the customer or the POS employee, thus being more secure and so higher face values are possible compared to Pin-on-Demand.

<a href="http://www.youtube.com/watch?feature=player_embedded&v=agYN-NSstJ0
" target="_blank"><img src="http://img.youtube.com/vi/agYN-NSstJ0/0.jpg" 
alt="paysafecard direct" width="240" height="180" border="10" /></a>

## Paysafecash
[Paysafecash](https://www.paysafecash.com/en-gb/) is the brand name for paying orders from e-commerce web shops at the POS with variable amounts.

Here the customer initates an order at a webshop, logins with its Paysafecash account data and a barcode is generated for the order amount.
Upon successful order confirmation at the POS, the payment is automatically completed at the web shop.

<a href="http://www.youtube.com/watch?feature=player_embedded&v=62Rl90BYu_0
" target="_blank"><img src="http://img.youtube.com/vi/62Rl90BYu_0/0.jpg" 
alt="Paysafecash" width="240" height="180" border="10" /></a>

## Paysafecash POS cashout
Paysafecash POS cashout is a cash withdrawal solution and serves as an alternative to the physical ATM machines found worldwide.

Customers can withdrawal money using the paysafecard POS network.

# Integration Process Overview
The following steps need to be completed in order to integrate the API.

+ **Test Data**: paysafecard provides the test data package. This contains an API key, account details, an integration checklist, voucher texts and a link to the downloads page.
+ **IP whitelisting**: The business partner provides the IP(s) used to connect to the paysafecard system, to be whitelisted.
+ **Integration in the Test Environment**: The business partner integrates the API into their test environment. Detailed information about the flows and API requests are contained below in this documentation.
+ **Integration Test**: As soon as the integration is finished in the test environment and the integration checklist fulfilled, the business partner must contact the paysafecard integration team who will test the API implementation as well as verify the voucher samples.
+ **Reconciliation Test:** paysafecard provides an example of a reconciliation file from the test system that must be processed by the business partner.
+ **Productive Data**: Once the integration test is successful, paysafecard provides the productive data. This contains a productive environment API key and account details. 
+ **Switch to Production**: The business partner switches the integration to the production environment (change API endpoints and API key).
+ **Productive Check**: An end to end test must be carried out to ensure a successful connection to the productive environment. A new voucher sample must be provided as proof of a successful integration in the productive environment.
+ **Go-live**: As soon as the productive check is successful, the technical integration is finished and a date can be set for the go-live.

# Technical Integration
This section provides a technical introduction to the API as well as 

## Establishing a connection
A connection to the paysafecard system is successful if the following prerequisites are fulfilled:
- X.509 certificate for request authenticity (the same certificate used in the Pin-on-Demand API applies).
- API key for request authentication (the same API Key used in the Pin-on-Demand API applies).
- Authorization of the business partner server IP address (if a 403 error is received when trying to access the service, it is likely that the IP address is not yet allowed to access).
- Content-type: Please make sure that the content type in the HTTP header, when submitting requests, is set to **Content-Type: application/json**
- Character encoding needs to be in UTF-8

## Test Environment and Endpoints
Every new business partner needs to first integrate the Paysafecash API on the test environment.
Once the integration is finished, a UAT(User Acceptance Test) needs to be done in order to ensure a seemless integration flow.

- The endpoint for the *test environment* is: https://distributor.test.paysafecard.com/v1/
- The endpoint for the *production environment* is: https://distributor.paysafecard.com/v1/

## HTTP status codes
| Code | Short Description     | Description |
| ---  | ---                   | ---         |
| 200  | OK                    | Everything is OK.|
| 201  | Created               | Object successfully created.|
| 400  | Bad Request           | Invalid data provided in the request.|
| 401  | Unauthorized          | Invalid or expired API key.|
| 404  | Not Found             | cashout feature disabled.|
| 500  | Internal Server Error | This indicates a general technical error on paysafecard's end.|
| 501  | Not Implemented       | Version feature not implemented.|
| 502  | Bad Gateway           | Invalid response from upstream system.|
| 503  | Service Unavailable   | Server overloaded.|
| 504  | Gateway Timeout       | Timeout from upstream system.|

```
   400 Bad Request

   {
    "code": "invalid_request_parameter",
    "message": "Cancel order already processed",
    "number": 10028
    }
```

# Voucher Print-outs
<a name="voucher_printout"></a> Each printed voucher (via the POS terminal) must contain the following data:

|Name               |Description    
|---                |---                                                                 
|BARCODE NUMBER     |The unique barcocode generated by the customer and processed at the POS. <br/><br/>  19-30 digits, numeric (preferably in 3 x 3 blocks).   
|SERIAL NUMBER      |The unique idenfication number used for customer inquiries.<br/><br/> 16 digits, numeric (leading zeros may be cut).
|CARD TYPE          |The product identifier. <br/><br/> paysafecard direct; Paysafecash; POS cashout
|AMOUNT             |The amount of the barcode processed.
|CURRENCY           |The currency of the barcode processed.
|DATE-TIME          |Date and time-stamp of the voucher print-out at the POS (e.g. YYYY:MM:DD - HH:MM:SS).
|TERMINAL ID        |The POS identifier. Must be the value of the terminal ID provided in the request to paysafecard.

**Important:** In addition, due to legal requirements the voucher print-out must contain fixed text referencing the issuer (e.g. PSC - Prepaid Services Company Ltd.),
the applicable T & Câ€™s and the e-mail contact for any inquiries.

It must also contain a dynamic text depending of the order status.

**Note:** Full sample texts translated in all languages will be provided by paysafecard with the test data package.

## paysafecard direct Voucher Print-out
![direct_voucher](https://www.paysafecash.com/fileadmin/5_API/direct_vouchers.PNG "paysafecard direct Voucher")

## Paysafecash Voucher Print-out
![paysafecash_voucher](https://www.paysafecash.com/fileadmin/5_API/paysafecash_vouchers.PNG "Paysafecash Voucher")

## Paysafecash POS cashout Voucher Print-out
![cashout_voucher](https://www.paysafecash.com/fileadmin/5_API/XXX.PNG "POS cashout Voucher")

# paysafecard direct and Paysafecash Flow
![transaction_flow_direct_paysafecash](https://www.paysafecash.com/fileadmin/5_API/direct_cash_flow.PNG "direct and Paysafecash Flow")

# Paysafecash POS cashout Flow
![transaction_flow_cashout](http://www.paysafecash.com/fileadmin/5_API/xxxx.PNG "POS cashout")

# Group paysafecard direct and Paysafecash Process

A paysafecard direct or Paysafecash order is processed as follows:

1. The customer brings a barcode to the POS

1. The POS employee scans or enters the barcode number
    
    2.1. The product and fee model (if applicable) is selected automatically

1. A `prepare order` request is made to the paysafecard system

1. paysafecard performs validation checks (limits, account status) and a valid response is returned (status of the order is **"PREPARED"**)

1. (*Optional*) A cancellation can be made via the `cancel order` request (status of the order is **"WITHDRAWN"**)

1. The `confirm order` request is made to the paysafecard system, using the `order id` validated in the `prepare order`

1. paysafecard performs new validation checks (limits, account status) and a valid response is returned (status of the order is **"DELIVERED"**)

1. A voucher is printed by the business partner system containing all the necessary info as shown [*here*](#voucher_printout) and handed out to the customer

1. (*Optional*) A cancellation can be made via the `cancel order` request (status of the order is **"WITHDRAWN"**)
    
    9.1 A cancellation recepit is printed by the business partner system and handed out to the customer

# Group paysafecard direct and Paysafecash API Requests
This section describes in detail all the requests available in the paysafecard direct and Paysafecash REST API.

Real API request examples can be viewed in the *Mock Server* by clicking in the requests names below.

# Preparing and confirming an order [/orders/]
The `prepare order` verifies the feasibility of the request, without causing any side effects in the system. 

This request is achieved by sending the parameter `capture` with the value "*false*".

<br>

Upon a successful response to the `prepare order`request, a `confirm order` request must be called. And as the names implies, this request will effectively execute the transaction.

This request is achieved by sending the parameter `capture` with the value "*true*".

<br>

**Important**:
- There is no time frame between the `prepare order` and `confirm order` requests

- A `confirm order` request can only be called upon a previously successful `prepare order` request

- Only successfuly confirmed transactions appear in the reconciliation file

<br>
<br>

**Note:** Using the optional HEADER-Parameter `Correlation-ID` the business partner can set a part of the parameter `id` on its own.


Allowed characters for the `Correlation-ID` are "a-z, A-Z, 0-9,-,_"

## prepare/confirm order [POST]

```
POST /orders/
```

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjXzdoT2lCTFc4bURSNFl3TWdDV3RPZHU4SWZXNjdBanU=

    + Attributes (prepare/confirm order)
    

+ Response 201 (application/json)
            
        {
        "amount": 10,
        "currency": "EUR",
        "card": {
            "amount": 10,
            "currency": "EUR",
            "serial": 1850422961,
            "pin": "0381859494354749",
            "product_id": "CLASSIC"
        },
        "distributor_id": "0009402006",
        "order_id": "order_0009402006_XxVNh31ux78Y1eJRgGe6Y6qcbVNtnMbr",
        "product_id": "CLASSIC"
        }

# Cancelling an order [/orders/{id}/]
The `cancel order` request is used to undo a previous order. The amount associated with the order will be invalidated and the customer will not be able to use it.

<br><br>
A `cancel order` request is successful if:
- The cool-down period has not elapsed (i.e, the order status is "PREPARED" or "DELIVERED")

<br>
### Cool-down period
During the cool-down period the amount associated with the order is temporarily frozen (meaning that the customer cannot spend the amount or the order is yet to be completed), 
guaranteeing a successful cancellation upon the `cancel order` request.

When the cool-down period of 5 minutes (by default) elapses, the cancellation might fail since the customer might already have used the amount associated with the order.

<br><br>
**Important:** 
- The implementation of this request is mandatory to undo a previous order in case the customer cannot pay for the transaction at the POS
- A successful cancellation will not appear on the invoice to the distributor but will appear in the daily reconciliation file


## cancel order [DELETE]

```
DELETE /orders/id/
```

+ Parameters

    + id: `order_0009402006_XxVNh31ux78Y1eJRgGe6Y6qcbVNtnMbr` (required) - Id of a successful `confirm order` request

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjXzdoT2lCTFc4bURSNFl3TWdDV3RPZHU4SWZXNjdBanU=
    

+ Response 201 (application/json)
            
        {
        "distributor_id": "0009402006",
        "order_id": "order_0009402006_gfGMpuuhPHhipuIMff6qOQM0MHmv90yb"
        }
        
# Retrieving an order [/orders/{id}]
The `retrieve order` request is used to retrieve the status and information of an order.

This request can be done at any time by the business partner.

### Order Status

|Value          |Description    |
|---            |---                                                                 |
|`PREPARED`     |The order has been successfully prepared.|
|`DELIVERED`    |The order has been successfully confirmed.|
|`REJECTED`     |The order has failed due to a business or technical error.|
|`WITHDRAWN`    |The prepared order has been successfully cancelled.|
|`CANCELLED`    |The confirmed order has been successfully cancelled.|

## retrieve order [GET]
```
GET /orders/id/
```

+ Parameters

    + id: `order_0009402006_XxVNh31ux78Y1eJRgGe6Y6qcbVNtnMbr` (required) - An order `id`

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjXzdoT2lCTFc4bURSNFl3TWdDV3RPZHU4SWZXNjdBanU=
    

+ Response 201 (application/json)
            
        {
        "amount": 10,
        "currency": "EUR",
        "card": {
            "amount": 10,
            "currency": "EUR",
            "serial": 1850423010,
            "product_id": "00028"
        },
        "distributor_id": "0009402006",
        "order_id": "order_0009402006_gfGMpuuhPHhipuIMff6qOQM0MHmv90yb",
        "product_id": "00028",
        "shop_id": "shopdid_test",
        "terminal_id": "test_terminal_123",
        "order_status": "DELIVERED",
        "delivery_type": "RETURN"
        }

# Group paysafecard direct and Paysafecash API Response Objects
Below, all possible response objects for the paysafecard direct and Paysafecash REST API are listed with the corresponding description.

# Group paysafecard direct and Paysafecash Error Codes
Below, all possible error codes for the the paysafecard direct and Paysafecash REST API are listed with the corresponding description.


# Group Paysafecash POS cashout Process
A Paysafecash POS cashout order is processed as follows:

# Group Paysafecash POS cashout API Requests
This section describes in detail all the requests available in the Paysafecash POS cashout REST API.

Real API request examples can be viewed in the *Mock Server* by clicking in the requests names below.

# Preparing an order [/cashouts/]

## prepare order [POST]

```
POST /orders/
```

+ Request (application/json)

    + Headers

               Authorization: Basic cHNjXzdoT2lCTFc4bURSNFl3TWdDV3RPZHU4SWZXNjdBanU=

    + Attributes (prepare/confirm order)
    

+ Response 201 (application/json)



# Data Structures

## TypedObject (object)

## prepare/confirm order (TypedObject)
+ amount: 0.00 (number, required) - The request amount (precision must be 2 digits after the decimal separator). 
The list of all possible face values is provided with the data package.
+ currency: EUR (required) - ISO 4217 (3 letter ISO currency code).
+ country: AT (required) - The code (ISO 3166-1) that identifies the country of the request.
The country code is provided with the data package.
+ product_id: 00028 (number, required) - The id of the product that is requested. The product id stays the same for different face values.
Available product idâ€™s can be found in the distribution contract with paysafecard and in the data package. 
+ delivery_type: RETURN (string, required) - To which channel should the PIN be delivered. 
For Pin-on-Demand, the value "RETURN" must always used in order to return the 16-digit PIN.
+ utc_offset: +00:00 (string, required) - The difference between the distributor time zone and UTC in minutes.
+ shop_id: shopidtest (string, required ) - Identifies the shop from where the request is made. 
Provided by the business partner.
+ terminal_id: terminalidtest (string, required) - Identifies the terminal from where the request is made. One shop can have multiple terminals.
**Important:** It is required that each terminal has a unique id. Provided by the business partner.
+ retailer_id: retaileridtest (string, optional) - Can be used to distinguish retail channels. One distributor can have multiple retailers. 
Can also be used to identify sub-distributors. Provided by the business partner.
+ customer (object) 
    + `id_type`: NONE (required) - The customer identification type. ACCOUNT or NONE.
    For Pin-on-Demand, the value "NONE" must always used.
+ capture: true (boolean, required) - Capture flag.
For Pin-on-Demand, the value "true" must always used, as the `execute order` request is a one step procedure.